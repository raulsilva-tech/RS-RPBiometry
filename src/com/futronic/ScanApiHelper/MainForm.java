/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainForm.java
 *
 * Created on 2011å¹´4æœˆ1æ—¥, ä¸‹å�ˆ12:53:32
 */

package com.futronic.ScanApiHelper;

import com.futronic.ScanApiHelper.Scanner;
import java.awt.*;
import java.awt.image.*;
import java.io.*;
import java.util.Iterator;
import javax.imageio.*;
import javax.swing.*;
import javax.imageio.stream.ImageOutputStream;

/**
 *
 * @author slyeung
 */
public class MainForm extends javax.swing.JFrame {

    private byte[] m_pImage;
    private Scanner m_devScan;
    /** Creates new form MainForm */
    public MainForm() {
        initComponents();
       /*
         * Set main frame to the center of display
         */
        setLocationRelativeTo( null );
        m_devScan = new Scanner();
        m_FingerPrintImage = new MyIcon();
        FingerImage.setIcon( m_FingerPrintImage );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FingerImage = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        chkLFD = new javax.swing.JCheckBox();
        chkInvertImage = new javax.swing.JCheckBox();
        btnGetFrame = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        chkWsq = new javax.swing.JCheckBox();
        chkLFDLevel2 = new javax.swing.JCheckBox();
        comboStrength = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        txtWrite7Bytes = new javax.swing.JTextField();
        btnWrite7Bytes = new javax.swing.JButton();
        btnRead7Bytes = new javax.swing.JButton();
        txtRead7Bytes = new javax.swing.JTextField();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        txtAuthorizationCode = new javax.swing.JTextField();
        btnSetAuthorizationCode = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtWriteSecret7Bytes = new javax.swing.JTextField();
        btnWriteSecret7Bytes = new javax.swing.JButton();
        txtReadSecret7Bytes = new javax.swing.JTextField();
        btnReadSecret7Bytes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ftrScanApiEx for Java");

        FingerImage.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Fingerprint image"));

        chkLFD.setText("Live Finger Detection (LFD)");
        chkLFD.setActionCommand("chkLFD");
        chkLFD.setName("chkLFD"); // NOI18N
        chkLFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLFDActionPerformed(evt);
            }
        });
        jLayeredPane2.add(chkLFD);
        chkLFD.setBounds(10, 110, 190, 24);

        chkInvertImage.setText("Invert Image");
        jLayeredPane2.add(chkInvertImage);
        chkInvertImage.setBounds(10, 90, 150, 24);

        btnGetFrame.setText("Get Frame");
        btnGetFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetFrameActionPerformed(evt);
            }
        });
        jLayeredPane2.add(btnGetFrame);
        btnGetFrame.setBounds(10, 210, 110, 29);

        txtInfo.setColumns(20);
        txtInfo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtInfo.setRows(2);
        txtInfo.setAutoscrolls(false);
        jScrollPane1.setViewportView(txtInfo);

        jLayeredPane2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 30, 230, 50);

        btnSave.setLabel("Save Bitmap");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jLayeredPane2.add(btnSave);
        btnSave.setBounds(130, 210, 110, 29);

        chkWsq.setText("WSQ");
        jLayeredPane2.add(chkWsq);
        chkWsq.setBounds(10, 180, 59, 24);

        chkLFDLevel2.setText("Level 2");
        chkLFDLevel2.setEnabled(false);
        jLayeredPane2.add(chkLFDLevel2);
        chkLFDLevel2.setBounds(20, 140, 100, 24);

        comboStrength.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        comboStrength.setEnabled(false);
        jLayeredPane2.add(comboStrength);
        comboStrength.setBounds(194, 140, 50, 20);

        jLabel3.setText("Strength");
        jLayeredPane2.add(jLabel3);
        jLabel3.setBounds(120, 140, 70, 20);

        lblMessage.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Others"));

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("7 Bytes"));

        txtWrite7Bytes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtWrite7BytesKeyReleased(evt);
            }
        });
        jLayeredPane3.add(txtWrite7Bytes);
        txtWrite7Bytes.setBounds(20, 30, 70, 27);

        btnWrite7Bytes.setEnabled(false);
        btnWrite7Bytes.setLabel("Write");
        btnWrite7Bytes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWrite7BytesActionPerformed(evt);
            }
        });
        jLayeredPane3.add(btnWrite7Bytes);
        btnWrite7Bytes.setBounds(100, 30, 80, 29);

        btnRead7Bytes.setLabel("Read");
        btnRead7Bytes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRead7BytesActionPerformed(evt);
            }
        });
        jLayeredPane3.add(btnRead7Bytes);
        btnRead7Bytes.setBounds(210, 30, 80, 29);
        jLayeredPane3.add(txtRead7Bytes);
        txtRead7Bytes.setBounds(310, 30, 70, 27);

        jLayeredPane1.add(jLayeredPane3);
        jLayeredPane3.setBounds(20, 30, 400, 70);

        jLayeredPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Secret 7 Bytes"));

        jLabel1.setText("Authorization code:");
        jLayeredPane4.add(jLabel1);
        jLabel1.setBounds(10, 20, 120, 17);

        txtAuthorizationCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAuthorizationCodeKeyReleased(evt);
            }
        });
        jLayeredPane4.add(txtAuthorizationCode);
        txtAuthorizationCode.setBounds(140, 20, 60, 27);

        btnSetAuthorizationCode.setText("SetAuthorizationCode");
        btnSetAuthorizationCode.setEnabled(false);
        btnSetAuthorizationCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetAuthorizationCodeActionPerformed(evt);
            }
        });
        jLayeredPane4.add(btnSetAuthorizationCode);
        btnSetAuthorizationCode.setBounds(210, 20, 170, 29);

        jLabel2.setText("Secret code:");
        jLayeredPane4.add(jLabel2);
        jLabel2.setBounds(10, 50, 110, 17);

        txtWriteSecret7Bytes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtWriteSecret7BytesKeyReleased(evt);
            }
        });
        jLayeredPane4.add(txtWriteSecret7Bytes);
        txtWriteSecret7Bytes.setBounds(140, 50, 60, 27);

        btnWriteSecret7Bytes.setText("WriteSecret7Bytes");
        btnWriteSecret7Bytes.setEnabled(false);
        btnWriteSecret7Bytes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWriteSecret7BytesActionPerformed(evt);
            }
        });
        jLayeredPane4.add(btnWriteSecret7Bytes);
        btnWriteSecret7Bytes.setBounds(210, 50, 170, 29);
        jLayeredPane4.add(txtReadSecret7Bytes);
        txtReadSecret7Bytes.setBounds(140, 80, 60, 27);

        btnReadSecret7Bytes.setText("ReadSecret7Bytes");
        btnReadSecret7Bytes.setEnabled(false);
        btnReadSecret7Bytes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadSecret7BytesActionPerformed(evt);
            }
        });
        jLayeredPane4.add(btnReadSecret7Bytes);
        btnReadSecret7Bytes.setBounds(210, 80, 170, 29);

        jLayeredPane1.add(jLayeredPane4);
        jLayeredPane4.setBounds(20, 110, 400, 120);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(FingerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 10, Short.MAX_VALUE)
                        .addComponent(FingerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetFrameActionPerformed
        int nWidth, nHeight;
        int option;
        String strInfo;

        btnGetFrame.setEnabled(false);
        lblMessage.setText("");
        
        if( !m_devScan.OpenDevice() )
        {
            lblMessage.setText("Device is not connected!");
            btnGetFrame.setEnabled(true);
            return;
        }
        strInfo = m_devScan.GetVersionInfo();
        if( strInfo == null)
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            btnGetFrame.setEnabled(true);
            return;
        }
        else
        {
            txtInfo.setText(strInfo);
        }
        if( !m_devScan.GetImageSize() )
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame.setEnabled(true);
            return;
        }
        nWidth = m_devScan.GetImageWidth();
        nHeight = m_devScan.GetImaegHeight();
        if(chkLFD.isSelected())
            option = m_devScan.FTR_OPTIONS_CHECK_FAKE_REPLICA;
        else
            option = 0;
        if( !m_devScan.SetOptions(m_devScan.FTR_OPTIONS_CHECK_FAKE_REPLICA, option ))
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame.setEnabled(true);
            return;
        }
        if( chkInvertImage.isSelected())
            option = m_devScan.FTR_OPTIONS_INVERT_IMAGE;
        else
            option = 0;
        if( !m_devScan.SetOptions(m_devScan.FTR_OPTIONS_INVERT_IMAGE, option))
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame.setEnabled(true);
            return;
        }
        if( chkLFDLevel2.isSelected() )
        {
            int nStrength = comboStrength.getSelectedIndex()+1;
            if( !m_devScan.SetProperty(m_devScan.FTR_PROPERTY_LFD_LEVEL, m_devScan.FTR_LFD_LEVEL_2))
            {
                lblMessage.setText(m_devScan.GetErrorMessage());
                m_devScan.CloseDevice();
                btnGetFrame.setEnabled(true);
                return;
            }
            if( !m_devScan.SetProperty(m_devScan.FTR_PROPERTY_LFD_SW_1_PARAM, nStrength))
            {
                lblMessage.setText(m_devScan.GetErrorMessage());
                m_devScan.CloseDevice();
                btnGetFrame.setEnabled(true);
                return;
            }
        }
        //allocate the buffer befoer call GetFrame
        m_pImage = new byte[nWidth*nHeight];
        if( !m_devScan.GetFrame(m_pImage) )
        {
            lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
            btnGetFrame.setEnabled(true);
            return;
        }       
        if( chkLFDLevel2.isSelected() )
        {
            int[] nGetStrength = new int[1];
            if( !m_devScan.GetProperty(m_devScan.FTR_PROPERTY_LFD_SW_1_CALCULATED_DATA, nGetStrength))
            {
                lblMessage.setText(m_devScan.GetErrorMessage());
                m_devScan.CloseDevice();
                btnGetFrame.setEnabled(true);
                return;
            }
            lblMessage.setText("LFD Level 2 Strength Calculated: " + nGetStrength[0]);
        }

        if( m_pImage != null && chkWsq.isSelected() )
        {
            //allocate the buffer for wsq
            byte[] pWsqTmp = new byte[nWidth*nHeight];
            float fBitrate = 0.75f;
            if( !m_devScan.ConvertRawToWsq( nWidth, nHeight, fBitrate, m_pImage, pWsqTmp) )
            {
                lblMessage.setText(m_devScan.GetErrorMessage());
                m_devScan.CloseDevice();
                btnGetFrame.setEnabled(true);
                return;            
            }
            // get the wsq image size
            int nWsqSize = m_devScan.GetWsqImageSize();
            // finally, copy the wsq image
            byte[] pWsqImage = new byte[nWsqSize];
            System.arraycopy(pWsqTmp, 0, pWsqImage, 0, nWsqSize);
        }        
        m_devScan.CloseDevice();
        if( m_pImage != null )
        {
            m_hImage = new BufferedImage( nWidth,
                                           nHeight,
                                           BufferedImage.TYPE_BYTE_GRAY );
            DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
            for( int i = 0; i < db1.getSize(); i++ )
            {
                db1.setElem( i, m_pImage[i] );
            }
            m_FingerPrintImage.setImage( m_hImage );
            FingerImage.repaint();
        }
        btnGetFrame.setEnabled(true);
    }//GEN-LAST:event_btnGetFrameActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        lblMessage.setText("");
        if( m_hImage != null)
        {
            JFileChooser fc = new JFileChooser();
            fc.addChoosableFileFilter(new MyFilter());
            int nRet = fc.showSaveDialog(this);
            if( nRet == JFileChooser.APPROVE_OPTION )
            {
                File f = fc.getSelectedFile();
                if(f.exists())
                {
                    int nResponse;
                    nResponse = JOptionPane.showConfirmDialog( this,
                            "File existed!\r\n\r\nDo you want to Overwrite it?\r\n\r\n",
                            getTitle(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE );
                    if( nResponse == JOptionPane.NO_OPTION)
                        return;
                }
                Iterator writers = ImageIO.getImageWritersByFormatName("bmp");
                ImageWriter writer = (ImageWriter)writers.next();
                try
                {
                    ImageOutputStream ios = ImageIO.createImageOutputStream(f);
                    writer.setOutput(ios);
                    writer.write( m_hImage);
                }
                catch(IOException ex)
                {
                    ex.printStackTrace();
                }
                lblMessage.setText("Image is saved!");
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtWrite7BytesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWrite7BytesKeyReleased
        String strText = txtWrite7Bytes.getText();
        if( strText.length() == 7)
            btnWrite7Bytes.setEnabled(true);
        else
            btnWrite7Bytes.setEnabled(false);
    }//GEN-LAST:event_txtWrite7BytesKeyReleased

    private void btnWrite7BytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWrite7BytesActionPerformed
        // TODO add your handling code here:
        if( !m_devScan.OpenDevice() )
        {
            lblMessage.setText("Device is not connected!");
            return;
        }
        String strText = txtWrite7Bytes.getText();
        byte[] buffer = strText.getBytes();
        if( m_devScan.Save7Bytes(buffer) )
            lblMessage.setText("Save7Bytes OK!");
        else
            lblMessage.setText(m_devScan.GetErrorMessage());
        m_devScan.CloseDevice();
    }//GEN-LAST:event_btnWrite7BytesActionPerformed

    private void btnRead7BytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRead7BytesActionPerformed
        if( !m_devScan.OpenDevice() )
        {
            lblMessage.setText("Device is not connected!");
            return;
        }
        byte[] buffer = new byte[7];
        if( m_devScan.Restore7Bytes(buffer) )
        {
            lblMessage.setText("Restore7Bytes OK!");
            String strText = String.format("%c%c%c%c%c%c%c",
                    buffer[0],buffer[1],buffer[2],buffer[3],buffer[4],buffer[5],buffer[6]);
            txtRead7Bytes.setText(strText);
        }
        else
            lblMessage.setText(m_devScan.GetErrorMessage());
        m_devScan.CloseDevice();      
    }//GEN-LAST:event_btnRead7BytesActionPerformed

    private void txtAuthorizationCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAuthorizationCodeKeyReleased
        String strText = txtAuthorizationCode.getText();
        if( strText.length() == 7)
        {
            btnSetAuthorizationCode.setEnabled(true);
            btnReadSecret7Bytes.setEnabled(true);
        }
        else
        {
            btnSetAuthorizationCode.setEnabled(false);
            btnWriteSecret7Bytes.setEnabled(false);
            btnReadSecret7Bytes.setEnabled(false);
        }
    }//GEN-LAST:event_txtAuthorizationCodeKeyReleased

    private void txtWriteSecret7BytesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWriteSecret7BytesKeyReleased
        if( txtWriteSecret7Bytes.getText().length() == 7 && txtAuthorizationCode.getText().length() == 7 )
            btnWriteSecret7Bytes.setEnabled(true);
        else
            btnWriteSecret7Bytes.setEnabled(false);
    }//GEN-LAST:event_txtWriteSecret7BytesKeyReleased

    private void btnSetAuthorizationCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetAuthorizationCodeActionPerformed
        int nResponse;
        nResponse = JOptionPane.showConfirmDialog( this,
                "NOTE: The authorization code can be set ONLY ONCE, and CAN NOT be changed.\r\n\r\nDo you want to Set Authorization Code?\r\n\r\n",
                getTitle(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE );
        if( nResponse == JOptionPane.YES_OPTION)
        {
            if( !m_devScan.OpenDevice() )
            {
                lblMessage.setText("Device is not connected!");
                return;
            }
            String strText = txtAuthorizationCode.getText();
            byte[] SevenBytesAuthorizationCode = strText.getBytes();
            if( m_devScan.SetNewAuthorizationCode(SevenBytesAuthorizationCode) )
            {
                lblMessage.setText("SetNewAuthorizationCode OK!");
            }
            else
                lblMessage.setText(m_devScan.GetErrorMessage());
            m_devScan.CloseDevice();
        }
    }//GEN-LAST:event_btnSetAuthorizationCodeActionPerformed

    private void btnWriteSecret7BytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWriteSecret7BytesActionPerformed
        if( !m_devScan.OpenDevice() )
        {
            lblMessage.setText("Device is not connected!");
            return;
        }
        byte[] SevenBytesAuthorizationCode = txtAuthorizationCode.getText().getBytes();
        byte[] buffer = txtWriteSecret7Bytes.getText().getBytes();
        if( m_devScan.SaveSecret7Bytes(SevenBytesAuthorizationCode, buffer) )
        {
            lblMessage.setText("SaveSecret7Bytes OK!");
        }
        else
            lblMessage.setText(m_devScan.GetErrorMessage());
        m_devScan.CloseDevice();
    }//GEN-LAST:event_btnWriteSecret7BytesActionPerformed

    private void btnReadSecret7BytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadSecret7BytesActionPerformed
        if( !m_devScan.OpenDevice() )
        {
            lblMessage.setText("Device is not connected!");
            return;
        }
        byte[] SevenBytesAuthorizationCode = txtAuthorizationCode.getText().getBytes();
        byte[] buffer = new byte[7];
        if( m_devScan.RestoreSecret7Bytes(SevenBytesAuthorizationCode, buffer) )
        {
            lblMessage.setText("RestoreSecret7Bytes OK!");
            String strText = String.format("%c%c%c%c%c%c%c",
                    buffer[0],buffer[1],buffer[2],buffer[3],buffer[4],buffer[5],buffer[6]);
            txtReadSecret7Bytes.setText(strText);
        }
        else
            lblMessage.setText(m_devScan.GetErrorMessage());
        m_devScan.CloseDevice();
    }//GEN-LAST:event_btnReadSecret7BytesActionPerformed

    private void chkLFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLFDActionPerformed
                // TODO add your handling code here:
        if( chkLFD.isSelected() )
        {
            chkLFDLevel2.setEnabled(true);
            comboStrength.setEnabled(true);
        }
        else
        {
            chkLFDLevel2.setEnabled(false);
            comboStrength.setEnabled(false);            
        }
    }//GEN-LAST:event_chkLFDActionPerformed
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    class MyIcon implements  Icon
    {
        public MyIcon()
        {
            m_Image = null;
        }

        public void paintIcon(Component c, Graphics g, int x, int y)
        {
            if( m_Image != null )
                g.drawImage( m_Image, x, y, getIconWidth(), getIconHeight(), null );
            else
                g.fillRect( x, y, getIconWidth(), getIconHeight() );
        }

        public int getIconWidth()
        {
            return 160;
        }

        public int getIconHeight()
        {
            return 240;
        }

        public boolean LoadImage( String path )
        {
            boolean bRetCode = false;
            Image newImg;
            try
            {
                File f = new File( path );
                newImg = ImageIO.read( f );
                bRetCode = true;
                setImage( newImg );
            }
            catch( IOException e )
            {
            }

            return bRetCode;
        }

        public void setImage( Image Img )
        {
            if( Img != null )
                m_Image = Img.getScaledInstance( getIconWidth(), getIconHeight(), Image.SCALE_FAST);
            else
                m_Image = null;
        }

        private Image m_Image;
    }

    class MyFilter extends javax.swing.filechooser.FileFilter {
        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".bmp");
        }
        public String getDescription() {
            return "*.bmp";
        }
    }

    private MyIcon  m_FingerPrintImage;
    private BufferedImage m_hImage;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FingerImage;
    private javax.swing.JButton btnGetFrame;
    private javax.swing.JButton btnRead7Bytes;
    private javax.swing.JButton btnReadSecret7Bytes;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSetAuthorizationCode;
    private javax.swing.JButton btnWrite7Bytes;
    private javax.swing.JButton btnWriteSecret7Bytes;
    private javax.swing.JCheckBox chkInvertImage;
    private javax.swing.JCheckBox chkLFD;
    private javax.swing.JCheckBox chkLFDLevel2;
    private javax.swing.JCheckBox chkWsq;
    private javax.swing.JComboBox comboStrength;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JTextField txtAuthorizationCode;
    private javax.swing.JTextArea txtInfo;
    private javax.swing.JTextField txtRead7Bytes;
    private javax.swing.JTextField txtReadSecret7Bytes;
    private javax.swing.JTextField txtWrite7Bytes;
    private javax.swing.JTextField txtWriteSecret7Bytes;
    // End of variables declaration//GEN-END:variables

}
